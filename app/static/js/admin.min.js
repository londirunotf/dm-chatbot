class AdminApp {constructor() {this.initializeElements();this.attachEventListeners();this.setupCSRF();}initializeElements() {this.addFaqBtn = document.getElementById('addFaqBtn');this.faqModal = document.getElementById('faqModal');this.modalClose = document.querySelector('.modal-close');this.faqForm = document.getElementById('faqForm');this.cancelBtn = document.getElementById('cancelBtn');this.faqId = document.getElementById('faqId');this.modalTitle = document.getElementById('modalTitle');this.faqTitle = document.getElementById('faqTitle');this.faqCategory = document.getElementById('faqCategory');this.faqQuestion = document.getElementById('faqQuestion');this.faqAnswer = document.getElementById('faqAnswer');this.faqKeywords = document.getElementById('faqKeywords');this.faqActive = document.getElementById('faqActive');this.editBtns = document.querySelectorAll('.edit-btn');this.toggleBtns = document.querySelectorAll('.toggle-btn');this.deleteBtns = document.querySelectorAll('.delete-btn');}setupCSRF() {this.csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content');}attachEventListeners() {this.addFaqBtn?.addEventListener('click',() => this.openAddModal());this.modalClose?.addEventListener('click',() => this.closeModal());this.cancelBtn?.addEventListener('click',() => this.closeModal());this.faqModal?.addEventListener('click',(e) => {if (e.target === this.faqModal) this.closeModal();});this.faqForm?.addEventListener('submit',(e) => this.handleFormSubmit(e));this.editBtns.forEach(btn => {btn.addEventListener('click',() => this.editFaq(btn.dataset.faqId));});this.toggleBtns.forEach(btn => {btn.addEventListener('click',() => this.toggleFaq(btn.dataset.faqId,btn.dataset.active === 'true'));});this.deleteBtns.forEach(btn => {btn.addEventListener('click',() => this.deleteFaq(btn.dataset.faqId));});document.addEventListener('keydown',(e) => {if (e.key === 'Escape' && this.faqModal?.style.display === 'block') {this.closeModal();}});}openAddModal() {this.modalTitle.textContent = 'FAQ追加';this.resetForm();this.faqModal.style.display = 'block';this.faqTitle.focus();}editFaq(faqId) {const faq = window.faqData?.find(f => f.id == faqId);if (!faq) return;this.modalTitle.textContent = 'FAQ編集';this.faqId.value = faq.id;this.faqTitle.value = faq.title || '';this.faqCategory.value = faq.category || '';this.faqQuestion.value = faq.question || '';this.faqAnswer.value = faq.answer || '';this.faqKeywords.value = faq.keywords || '';this.faqActive.checked = faq.is_active;this.faqModal.style.display = 'block';this.faqTitle.focus();}closeModal() {this.faqModal.style.display = 'none';this.resetForm();}resetForm() {this.faqForm.reset();this.faqId.value = '';this.faqActive.checked = true;}async handleFormSubmit(e) {e.preventDefault();const formData = new FormData(this.faqForm);const data = Object.fromEntries(formData.entries());data.is_active = this.faqActive.checked;const isEdit = !!this.faqId.value;const url = isEdit ? `/admin/faq/${this.faqId.value}/edit` :'/admin/faq/add';const method = 'POST';try {const response = await fetch(url,{method:method,headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken },body:JSON.stringify(data) });const result = await response.json();if (response.ok) {this.showMessage('FAQが正常に保存されました','success');this.closeModal();setTimeout(() => location.reload(),1000);}else {this.showMessage(result.error || 'エラーが発生しました','error');}}catch (error) {console.error('保存エラー:',error);this.showMessage('通信エラーが発生しました','error');}}async toggleFaq(faqId,currentActive) {if (!confirm(`このFAQを${currentActive ? '非アクティブ' :'アクティブ'}にしますか？`)) {return;}try {const response = await fetch(`/admin/faq/${faqId}/toggle`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken }});const result = await response.json();if (response.ok) {this.showMessage('FAQ状態が更新されました','success');setTimeout(() => location.reload(),1000);}else {this.showMessage(result.error || 'エラーが発生しました','error');}}catch (error) {console.error('状態更新エラー:',error);this.showMessage('通信エラーが発生しました','error');}}async deleteFaq(faqId) {if (!confirm('このFAQを削除しますか？この操作は取り消せません。')) {return;}try {const response = await fetch(`/admin/faq/${faqId}/delete`,{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken }});const result = await response.json();if (response.ok) {this.showMessage('FAQが削除されました','success');setTimeout(() => location.reload(),1000);}else {this.showMessage(result.error || 'エラーが発生しました','error');}}catch (error) {console.error('削除エラー:',error);this.showMessage('通信エラーが発生しました','error');}}showMessage(message,type) {const existingMessages = document.querySelectorAll('.temp-flash-message');existingMessages.forEach(msg => msg.remove());const messageDiv = document.createElement('div');messageDiv.className = `flash-message flash-${type}temp-flash-message`;messageDiv.textContent = message;const adminMain = document.querySelector('.admin-main');adminMain.insertBefore(messageDiv,adminMain.firstChild);setTimeout(() => {messageDiv.remove();},5000);}}document.addEventListener('DOMContentLoaded',() => {new AdminApp();});class AdminDashboard {constructor() {this.initializeElements();this.attachEventListeners();this.setupRealtimeUpdates();this.initializeChart();this.loadFAQRanking();this.updateLastRefreshTime();this.checkForAlerts();}initializeElements() {this.refreshButton = document.getElementById('refreshDashboard');this.lastUpdated = document.getElementById('lastUpdated');this.usageChart = document.getElementById('usageChart');this.faqRanking = document.getElementById('faqRanking');this.activityList = document.getElementById('activityList');this.dashboardAlerts = document.getElementById('dashboardAlerts');this.reportModal = document.getElementById('reportModal');this.generateReportBtn = document.getElementById('generateReportBtn');this.reportType = document.getElementById('reportType');this.reportPeriod = document.getElementById('reportPeriod');this.customDateRange = document.getElementById('customDateRange');this.generateReportAction = document.getElementById('generateReport');this.systemMaintenanceAction = document.getElementById('systemMaintenance');this.filterActivityBtn = document.getElementById('filterActivity');}attachEventListeners() {this.refreshButton.addEventListener('click',() => {this.refreshDashboard();});this.generateReportAction.addEventListener('click',(e) => {e.preventDefault();this.showReportModal();});this.generateReportBtn.addEventListener('click',() => {this.generateReport();});this.reportPeriod.addEventListener('change',(e) => {this.toggleCustomDateRange(e.target.value === 'custom');});const modalCloses = this.reportModal.querySelectorAll('.modal-close');modalCloses.forEach(close => {close.addEventListener('click',() => {this.hideReportModal();});});this.reportModal.addEventListener('click',(e) => {if (e.target === this.reportModal) {this.hideReportModal();}});this.systemMaintenanceAction.addEventListener('click',(e) => {e.preventDefault();this.showMaintenanceDialog();});this.filterActivityBtn.addEventListener('click',() => {this.toggleActivityFilter();});document.addEventListener('click',(e) => {if (e.target.classList.contains('alert-dismiss')) {this.dismissAlert(e.target.closest('.alert-item'));}if (e.target.textContent === '対応する' && e.target.classList.contains('btn-primary')) {this.handleEscalationAction(e);}});setInterval(() => {this.refreshDashboard();},5 * 60 * 1000);document.addEventListener('keydown',(e) => {if (e.altKey && e.key.toLowerCase() === 'r') {e.preventDefault();this.refreshDashboard();}if (e.altKey && e.key.toLowerCase() === 't') {e.preventDefault();this.testAlert();}});}setupRealtimeUpdates() {setInterval(() => {this.checkForNewEscalations();},30000);setInterval(() => {this.updateActivityFeed();},2 * 60 * 1000);}async refreshDashboard() {try {this.refreshButton.style.transform = 'rotate(360deg)';this.refreshButton.disabled = true;await Promise.all([ this.updateStatistics(),this.updateChart(),this.loadFAQRanking(),this.updateActivityFeed(),this.checkForAlerts() ]);this.updateLastRefreshTime();this.showNotification('ダッシュボードが更新されました','success');}catch (error) {console.error('Dashboard refresh failed:',error);this.showNotification('更新中にエラーが発生しました','error');}finally {this.refreshButton.disabled = false;setTimeout(() => {this.refreshButton.style.transform = 'rotate(0deg)';},300);}}async updateStatistics() {return new Promise(resolve => {setTimeout(() => {const statNumbers = document.querySelectorAll('.stat-number');statNumbers.forEach(stat => {this.animateNumber(stat);});resolve();},500);});}animateNumber(element) {const target = parseInt(element.textContent);const duration = 1000;const step = Math.ceil(target / (duration / 16));let current = 0;const timer = setInterval(() => {current += step;if (current >= target) {current = target;clearInterval(timer);}element.textContent = current;},16);}initializeChart() {if (!this.usageChart) return;const ctx = this.usageChart.getContext('2d');this.drawSimpleChart(ctx);}drawSimpleChart(ctx) {const width = ctx.canvas.width;const height = ctx.canvas.height;ctx.clearRect(0,0,width,height);const data = [12,18,8,15,25,22,30];const escalationData = [2,3,1,2,5,4,6];const labels = ['月','火','水','木','金','土','日'];const maxValue = Math.max(...data,...escalationData) * 1.2;const barWidth = width / (data.length * 2 + 1);const chartHeight = height - 40;data.forEach((value,index) => {const barHeight = (value / maxValue) * chartHeight;const x = (index * 2 + 1) * barWidth;const y = height - barHeight - 20;ctx.fillStyle = '#2196F3';ctx.fillRect(x,y,barWidth * 0.8,barHeight);const escHeight = (escalationData[index] / maxValue) * chartHeight;const escY = height - escHeight - 20;ctx.fillStyle = '#f44336';ctx.fillRect(x + barWidth * 0.8 + 2,escY,barWidth * 0.8,escHeight);ctx.fillStyle = '#666';ctx.font = '12px Arial';ctx.textAlign = 'center';ctx.fillText(labels[index],x + barWidth,height - 5);});ctx.fillStyle = '#999';ctx.font = '14px Arial';ctx.textAlign = 'center';ctx.fillText('過去7日間の利用状況',width / 2,20);}async updateChart() {if (!this.usageChart) return;const ctx = this.usageChart.getContext('2d');this.drawSimpleChart(ctx);}async loadFAQRanking() {if (!this.faqRanking) return;try {const mockFAQs = [ {title:'送信権限の確認方法',views:245,trend:'+12%' },{title:'DMの宛先追加手順',views:189,trend:'+8%' },{title:'エラー対処法',views:156,trend:'-3%' },{title:'添付ファイルの制限',views:134,trend:'+15%' },{title:'システムメンテナンス情報',views:98,trend:'+5%' }];this.faqRanking.innerHTML = mockFAQs.map((faq,index) => ` <div class="ranking-item"> <div class="rank">${index + 1}</div> <div class="faq-info"> <div class="faq-title">${faq.title}</div> <div class="faq-stats">${faq.views}回閲覧 • ${faq.trend}</div> </div> </div> `).join('');}catch (error) {console.error('Failed to load FAQ ranking:',error);this.faqRanking.innerHTML = '<div class="ranking-item">データの読み込みに失敗しました</div>';}}async updateActivityFeed() {if (!this.activityList) return;try {const mockActivities = [ {icon:'💬',title:'新しい質問が投稿されました',meta:`${this.getRandomMinutes()}分前 • ユーザー#${Math.floor(Math.random() * 9999)}`,status:'pending' },{icon:'✅',title:'FAQ「送信権限について」が更新されました',meta:`${this.getRandomHours()}時間前 • 管理者`,status:'completed' },{icon:'🔍',title:`FAQ検索「${this.getRandomSearchTerm()}」が実行されました`,meta:`${this.getRandomHours()}時間前 • ユーザー#${Math.floor(Math.random() * 9999)}`,status:'info' }];const existingItems = Array.from(this.activityList.querySelectorAll('.activity-item'));if (existingItems.length > 0) {while (existingItems.length > 5) {existingItems.pop().remove();}}const newActivity = mockActivities[0];const activityHTML = ` <div class="activity-item" style="opacity:0;transform:translateY(-10px);"> <div class="activity-icon">${newActivity.icon}</div> <div class="activity-content"> <div class="activity-title">${newActivity.title}</div> <div class="activity-meta">${newActivity.meta}</div> </div> <div class="activity-status ${newActivity.status}">${this.getStatusLabel(newActivity.status)}</div> </div> `;this.activityList.insertAdjacentHTML('afterbegin',activityHTML);const newItem = this.activityList.firstElementChild;setTimeout(() => {newItem.style.transition = 'all 0.3s ease-out';newItem.style.opacity = '1';newItem.style.transform = 'translateY(0)';},100);}catch (error) {console.error('Failed to update activity feed:',error);}}getRandomMinutes() {return Math.floor(Math.random() * 60) + 1;}getRandomHours() {return Math.floor(Math.random() * 24) + 1;}getRandomSearchTerm() {const terms = ['不明な宛先','送信エラー','ファイル添付','権限設定','メンテナンス'];return terms[Math.floor(Math.random() * terms.length)];}getStatusLabel(status) {const labels = {'pending':'対応待ち','completed':'完了','info':'参考' };return labels[status] || status;}async checkForNewEscalations() {const hasNewEscalations = Math.random() < 0.1;if (hasNewEscalations) {this.showAlert('新しい質問が投稿されました','緊急対応が必要な質問があります。','high');}}async checkForAlerts() {try {const pendingEscalations = parseInt(document.querySelector('.stat-card.urgent .stat-number').textContent) || 0;if (pendingEscalations >= 10 && this.dashboardAlerts) {const alertMessage = document.getElementById('alertMessage');if (alertMessage) {alertMessage.textContent = `現在${pendingEscalations}件の未解決質問があります。`;}setTimeout(() => {this.dashboardAlerts.style.display = 'flex';},2000);}else {if (this.dashboardAlerts) {this.dashboardAlerts.style.display = 'none';}}}catch (error) {console.log('Alert check error:',error);}}showAlert(title,message,level = 'info') {if (!this.dashboardAlerts) return;const alertHTML = ` <div class="alert-item ${level}" style="opacity:0;transform:translateX(100%);"> <div class="alert-icon">${this.getAlertIcon(level)}</div> <div class="alert-content"> <div class="alert-title">${title}</div> <div class="alert-message">${message}</div> </div> <div class="alert-actions"> <button type="button" class="btn btn-small btn-primary">対応する</button> <button type="button" class="btn btn-small btn-link alert-dismiss">閉じる</button> </div> </div> `;this.dashboardAlerts.insertAdjacentHTML('beforeend',alertHTML);this.dashboardAlerts.style.display = 'flex';const newAlert = this.dashboardAlerts.lastElementChild;setTimeout(() => {newAlert.style.transition = 'all 0.3s ease-out';newAlert.style.opacity = '1';newAlert.style.transform = 'translateX(0)';},100);setTimeout(() => {this.dismissAlert(newAlert);},10000);}getAlertIcon(level) {const icons = {'high':'🚨','medium':'⚠️','low':'ℹ️','info':'ℹ️' };return icons[level] || 'ℹ️';}dismissAlert(alertElement) {if (!alertElement) return;alertElement.style.transition = 'all 0.3s ease-in';alertElement.style.opacity = '0';alertElement.style.transform = 'translateX(100%)';setTimeout(() => {alertElement.remove();if (this.dashboardAlerts && this.dashboardAlerts.children.length === 0) {this.dashboardAlerts.style.display = 'none';}},300);}handleEscalationAction(event) {event.preventDefault();window.location.href = '/admin/escalations';}testAlert() {console.log('警告テスト実行');if (this.dashboardAlerts) {const alertMessage = document.getElementById('alertMessage');if (alertMessage) {alertMessage.textContent = 'テスト警告:現在7件の未解決質問があります。（実際は10件以上の場合のみ表示）';}this.dashboardAlerts.style.display = 'flex';this.showNotification('警告テストを実行しました（Alt + T）','info');}}showReportModal() {if (this.reportModal) {this.reportModal.style.display = 'block';this.reportType.focus();}}hideReportModal() {if (this.reportModal) {this.reportModal.style.display = 'none';}}toggleCustomDateRange(show) {if (this.customDateRange) {this.customDateRange.style.display = show ? 'grid' :'none';}}async generateReport() {const reportType = this.reportType.value;const period = this.reportPeriod.value;try {this.generateReportBtn.disabled = true;this.generateReportBtn.textContent = '生成中...';await new Promise(resolve => setTimeout(resolve,2000));const reportData = this.mockReportGeneration(reportType,period);this.downloadReport(reportData,reportType);this.showNotification('レポートが生成されました','success');this.hideReportModal();}catch (error) {console.error('Report generation failed:',error);this.showNotification('レポート生成中にエラーが発生しました','error');}finally {this.generateReportBtn.disabled = false;this.generateReportBtn.textContent = 'レポート生成';}}mockReportGeneration(type,period) {const reportTypes = {'conversations':'会話レポート','faq_usage':'FAQ利用状況','escalations':'エスカレーション分析','user_satisfaction':'ユーザー満足度' };const data = {title:reportTypes[type] || 'レポート',period:period,generated:new Date().toISOString(),data:`${reportTypes[type]}のサンプルデータ\n期間:${period}\n生成日時:${new Date().toLocaleString('ja-JP')}` };return data;}downloadReport(reportData,type) {const blob = new Blob([reportData.data],{type:'text/plain;charset=utf-8' });const url = URL.createObjectURL(blob);const a = document.createElement('a');a.href = url;a.download = `${reportData.title}_${new Date().toISOString().split('T')[0]}.txt`;document.body.appendChild(a);a.click();document.body.removeChild(a);URL.revokeObjectURL(url);}showMaintenanceDialog() {const confirmed = confirm('システムメンテナンスモードに入りますか？\n※ユーザーのアクセスが一時的に制限されます。');if (confirmed) {this.showNotification('メンテナンスモードは未実装です','info');}}toggleActivityFilter() {const filterOptions = ['すべて','対応待ち','完了','参考'];const currentFilter = this.filterActivityBtn.dataset.filter || 'すべて';const currentIndex = filterOptions.indexOf(currentFilter);const nextFilter = filterOptions[(currentIndex + 1) % filterOptions.length];this.filterActivityBtn.dataset.filter = nextFilter;this.filterActivityBtn.textContent = `フィルター:${nextFilter}`;this.applyActivityFilter(nextFilter);}applyActivityFilter(filter) {const activities = this.activityList.querySelectorAll('.activity-item');activities.forEach(activity => {const status = activity.querySelector('.activity-status');if (!status) return;const statusText = status.textContent.trim();const shouldShow = filter === 'すべて' || statusText === filter;activity.style.display = shouldShow ? 'flex' :'none';});}updateLastRefreshTime() {if (this.lastUpdated) {const now = new Date();this.lastUpdated.textContent = `最終更新:${now.toLocaleTimeString('ja-JP',{hour:'2-digit',minute:'2-digit' })}`;}}showNotification(message,type = 'info') {if (window.chatApp && window.chatApp.showNotification) {window.chatApp.showNotification(message,type);}else {console.log(`${type.toUpperCase()}:${message}`);const toast = document.createElement('div');toast.style.cssText = ` position:fixed;top:20px;right:20px;padding:12px 20px;background:${type === 'error' ? '#f44336' :type === 'success' ? '#4CAF50' :'#2196F3'};color:white;border-radius:4px;z-index:10000;font-size:14px;opacity:0;transform:translateY(-20px);transition:all 0.3s ease;`;toast.textContent = message;document.body.appendChild(toast);setTimeout(() => {toast.style.opacity = '1';toast.style.transform = 'translateY(0)';},100);setTimeout(() => {toast.style.opacity = '0';toast.style.transform = 'translateY(-20px)';setTimeout(() => toast.remove(),300);},3000);}}}document.addEventListener('DOMContentLoaded',() => {if (document.querySelector('.dashboard')) {window.adminDashboard = new AdminDashboard();console.log('🎛️ 管理ダッシュボードが初期化されました');console.log('利用可能なショートカット:');console.log('- Alt + R:ダッシュボード更新');console.log('- Alt + T:警告表示テスト');}});document.addEventListener('DOMContentLoaded',function() {window.togglePassword = function(inputId = 'password') {const passwordInput = document.getElementById(inputId);const toggleButton = passwordInput.parentNode.querySelector('.password-toggle');if (passwordInput.type === 'password') {passwordInput.type = 'text';toggleButton.textContent = '🙈';toggleButton.title = 'パスワードを非表示';}else {passwordInput.type = 'password';toggleButton.textContent = '👁️';toggleButton.title = 'パスワードを表示';}};const authForm = document.querySelector('.auth-form');if (authForm) {authForm.addEventListener('submit',function(e) {const submitButton = authForm.querySelector('button[type="submit"]');const originalText = submitButton.innerHTML;submitButton.innerHTML = '<span class="button-icon">⏳</span>処理中...';submitButton.disabled = true;const userIdInput = document.getElementById('user_id');const passwordInput = document.getElementById('password');if (userIdInput && !userIdInput.value.trim()) {e.preventDefault();showError('ユーザーIDを入力してください');resetSubmitButton(submitButton,originalText);return;}if (passwordInput && !passwordInput.value) {e.preventDefault();showError('パスワードを入力してください');resetSubmitButton(submitButton,originalText);return;}const newPasswordInput = document.getElementById('new_password');const confirmPasswordInput = document.getElementById('confirm_password');if (newPasswordInput && confirmPasswordInput) {if (newPasswordInput.value !== confirmPasswordInput.value) {e.preventDefault();showError('新しいパスワードが一致しません');resetSubmitButton(submitButton,originalText);return;}if (newPasswordInput.value.length < 6) {e.preventDefault();showError('パスワードは6文字以上で入力してください');resetSubmitButton(submitButton,originalText);return;}}setTimeout(() => {if (submitButton.disabled) {resetSubmitButton(submitButton,originalText);showError('処理に時間がかかっています。再度お試しください。');}},10000);});}document.addEventListener('keypress',function(e) {if (e.key === 'Enter' && authForm) {const activeElement = document.activeElement;if (activeElement && activeElement.tagName === 'INPUT') {authForm.requestSubmit();}}});const firstInput = authForm?.querySelector('input[type="text"],input[type="password"]');if (firstInput) {firstInput.focus();}if (window.location.pathname !== '/auth/login') {checkSessionValidity();}const flashMessages = document.querySelectorAll('.flash-message');flashMessages.forEach(message => {if (message.classList.contains('flash-success')) {setTimeout(() => {message.style.opacity = '0';setTimeout(() => message.remove(),300);},3000);}});});function resetSubmitButton(button,originalText) {button.innerHTML = originalText;button.disabled = false;}function showError(message) {const existingErrors = document.querySelectorAll('.flash-error.temp-error');existingErrors.forEach(error => error.remove());const errorDiv = document.createElement('div');errorDiv.className = 'flash-message flash-error temp-error';errorDiv.textContent = message;const authForm = document.querySelector('.auth-form');if (authForm) {authForm.parentNode.insertBefore(errorDiv,authForm);setTimeout(() => {errorDiv.style.opacity = '0';setTimeout(() => errorDiv.remove(),300);},5000);}}function checkSessionValidity() {setInterval(async () => {try {const response = await fetch('/auth/check-session');const result = await response.json();if (!result.valid) {showError('セッションが無効になりました。再度ログインしてください。');setTimeout(() => {window.location.href = '/auth/login';},2000);}}catch (error) {console.warn('セッションチェックでエラーが発生しました:',error);}},300000);}function checkPasswordStrength(password) {let strength = 0;let feedback = [];if (password.length >= 8) {strength += 1;}else {feedback.push('8文字以上');}if (/[A-Z]/.test(password)) {strength += 1;}else {feedback.push('大文字を含む');}if (/[a-z]/.test(password)) {strength += 1;}else {feedback.push('小文字を含む');}if (/[0-9]/.test(password)) {strength += 1;}else {feedback.push('数字を含む');}if (/[^A-Za-z0-9]/.test(password)) {strength += 1;}else {feedback.push('記号を含む');}return {strength:strength,feedback:feedback,level:strength < 2 ? 'weak' :strength < 4 ? 'medium' :'strong' };}document.addEventListener('DOMContentLoaded',function() {const newPasswordInput = document.getElementById('new_password');if (newPasswordInput) {const strengthIndicator = document.createElement('div');strengthIndicator.className = 'password-strength';strengthIndicator.innerHTML = ` <div class="strength-bar"> <div class="strength-fill"></div> </div> <div class="strength-text"></div> `;newPasswordInput.parentNode.appendChild(strengthIndicator);newPasswordInput.addEventListener('input',function() {const password = this.value;const strength = checkPasswordStrength(password);const fill = strengthIndicator.querySelector('.strength-fill');const text = strengthIndicator.querySelector('.strength-text');fill.style.width = (strength.strength * 20) + '%';fill.className = `strength-fill ${strength.level}`;if (password.length === 0) {text.textContent = '';}else if (strength.level === 'weak') {text.textContent = '弱い:' + strength.feedback.join(',');text.className = 'strength-text weak';}else if (strength.level === 'medium') {text.textContent = '普通:より安全にするには ' + strength.feedback.join(',');text.className = 'strength-text medium';}else {text.textContent = '強い:安全なパスワードです';text.className = 'strength-text strong';}});}});document.addEventListener('keydown',function(e) {if (e.key === 'Escape') {const modals = document.querySelectorAll('.modal.active');modals.forEach(modal => modal.classList.remove('active'));}if (e.key === 'Tab') {const focusableElements = document.querySelectorAll( 'input,button,select,textarea,a[href],[tabindex]:not([tabindex="-1"])' );const firstElement = focusableElements[0];const lastElement = focusableElements[focusableElements.length - 1];if (e.shiftKey && document.activeElement === firstElement) {e.preventDefault();lastElement.focus();}else if (!e.shiftKey && document.activeElement === lastElement) {e.preventDefault();firstElement.focus();}}});