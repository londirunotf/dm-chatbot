class ChatApp {constructor() {this.initializeElements();this.attachEventListeners();this.setupMobileHandlers();this.loadMessages();this.setupCSRF();this.setupAutoSave();this.isTyping = false;this.typingTimeout = null;}initializeElements() {this.messageInput = document.getElementById('messageInput');this.sendButton = document.getElementById('sendButton');this.fileButton = document.getElementById('fileButton');this.fileInput = document.getElementById('fileInput');this.chatMessages = document.getElementById('chatMessages');this.charCount = document.getElementById('charCount');this.faqModal = document.getElementById('faqModal');this.modalClose = document.querySelector('.modal-close');this.useFaqButton = document.getElementById('useFaqButton');this.faqItems = document.querySelectorAll('.faq-item');}setupCSRF() {this.csrfToken = document.querySelector('meta[name=csrf-token]')?.getAttribute('content');}attachEventListeners() {this.sendButton.addEventListener('click',() => this.sendMessage());this.messageInput.addEventListener('keypress',(e) => {if (e.key === 'Enter' && !e.shiftKey) {e.preventDefault();this.sendMessage();}});this.messageInput.addEventListener('input',() => {this.updateCharCount();this.showTypingIndicator();});this.messageInput.addEventListener('focus',() => {this.messageInput.parentElement.classList.add('focused');});this.messageInput.addEventListener('blur',() => {this.messageInput.parentElement.classList.remove('focused');});this.fileButton.addEventListener('click',() => this.fileInput.click());this.fileInput.addEventListener('change',() => this.handleFileSelect());this.faqItems.forEach(item => {item.addEventListener('click',() => this.showFaqModal(item.dataset.faqId));});this.modalClose.addEventListener('click',() => this.closeFaqModal());this.faqModal.addEventListener('click',(e) => {if (e.target === this.faqModal) this.closeFaqModal();});this.useFaqButton.addEventListener('click',() => this.useFaqAnswer());document.addEventListener('keydown',(e) => {if (e.key === 'Escape' && this.faqModal.style.display === 'block') {this.closeFaqModal();}});}updateCharCount() {const length = this.messageInput.value.length;this.charCount.textContent = length;if (length > 1000) {this.charCount.style.color = 'red';this.sendButton.disabled = true;this.charCount.textContent += ' (上限超過)';}else if (length > 800) {this.charCount.style.color = 'orange';this.sendButton.disabled = false;}else {this.charCount.style.color = '#666';this.sendButton.disabled = false;}const isEmpty = length === 0;this.sendButton.disabled = isEmpty || length > 1000;this.sendButton.style.opacity = this.sendButton.disabled ? '0.5' :'1';const enabledIcon = this.sendButton.querySelector('.send-icon-enabled');const disabledIcon = this.sendButton.querySelector('.send-icon-disabled');if (enabledIcon && disabledIcon) {if (this.sendButton.disabled) {enabledIcon.style.display = 'none';disabledIcon.style.display = 'inline-block';}else {enabledIcon.style.display = 'inline-block';disabledIcon.style.display = 'none';}}}async sendMessage() {const message = this.messageInput.value.trim();if (!message || this.sendButton.disabled) return;const userMessageElement = this.addUserMessage(message);this.messageInput.value = '';this.updateCharCount();this.sendButton.disabled = true;this.hideTypingIndicator();this.showBotTyping();this.addMessageStatus(userMessageElement,'sending');try {const response = await fetch('/api/send_message',{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.csrfToken },body:JSON.stringify({message:message }) });const data = await response.json();this.hideBotTyping();if (response.ok) {this.addMessageStatus(userMessageElement,'sent');setTimeout(() => {this.addBotMessage(data);},300);}else {this.addMessageStatus(userMessageElement,'error');this.addErrorMessage(data.error || 'エラーが発生しました');}}catch (error) {console.error('送信エラー:',error);this.hideBotTyping();this.addMessageStatus(userMessageElement,'error');this.addErrorMessage('通信エラーが発生しました。インターネット接続を確認してください。');}finally {this.sendButton.disabled = false;}}addUserMessage(content) {const messageElement = this.createMessageElement('user',content);this.chatMessages.appendChild(messageElement);this.scrollToBottom();return messageElement;}addBotMessage(data) {let content;let messageType = 'bot';if (data.type === 'faq_answer') {content = `<strong>FAQ:${data.faq_title}</strong><br><br>${data.message}`;}else if (data.type === 'escalation') {content = data.message;messageType = 'staff';}else {content = data.message;}const messageElement = this.createMessageElement(messageType,content,data.timestamp);this.chatMessages.appendChild(messageElement);this.scrollToBottom();}addErrorMessage(content) {const messageElement = this.createMessageElement('bot',`エラー:${content}`);messageElement.querySelector('.message-bubble').style.backgroundColor = '#ffebee';messageElement.querySelector('.message-bubble').style.color = '#c62828';this.chatMessages.appendChild(messageElement);this.scrollToBottom();}createMessageElement(type,content,timestamp = null) {const messageDiv = document.createElement('div');messageDiv.className = `${type}-message`;const bubbleDiv = document.createElement('div');bubbleDiv.className = 'message-bubble';const contentDiv = document.createElement('div');contentDiv.className = 'message-content';contentDiv.innerHTML = content;const timeDiv = document.createElement('div');timeDiv.className = 'message-time';timeDiv.textContent = timestamp ? new Date(timestamp).toLocaleTimeString('ja-JP',{hour:'2-digit',minute:'2-digit' }) :new Date().toLocaleTimeString('ja-JP',{hour:'2-digit',minute:'2-digit' });bubbleDiv.appendChild(contentDiv);bubbleDiv.appendChild(timeDiv);messageDiv.appendChild(bubbleDiv);return messageDiv;}async loadMessages() {try {const response = await fetch('/api/get_messages');const data = await response.json();if (response.ok && data.messages.length > 0) {const welcomeMessage = this.chatMessages.querySelector('.welcome-message');if (welcomeMessage) {welcomeMessage.remove();}data.messages.forEach(msg => {if (msg.message_type === 'user') {this.addUserMessageFromData(msg);}else {this.addBotMessageFromData(msg);}});}}catch (error) {console.error('メッセージ読み込みエラー:',error);}}addUserMessageFromData(msg) {const messageElement = this.createMessageElement('user',msg.content,msg.timestamp);this.chatMessages.appendChild(messageElement);}addBotMessageFromData(msg) {let content = msg.content;if (msg.faq_id) {const faq = window.faqData?.find(f => f.id === msg.faq_id);if (faq) {content = `<strong>FAQ:${faq.title}</strong><br><br>${content}`;}}const messageType = msg.message_type === 'staff' ? 'staff' :'bot';const messageElement = this.createMessageElement(messageType,content,msg.timestamp);this.chatMessages.appendChild(messageElement);}scrollToBottom() {this.chatMessages.scrollTop = this.chatMessages.scrollHeight;}showFaqModal(faqId) {const faq = window.faqData?.find(f => f.id == faqId);if (!faq) return;document.getElementById('faqModalTitle').textContent = faq.title;document.getElementById('faqModalQuestion').textContent = faq.question;document.getElementById('faqModalAnswer').innerHTML = faq.answer.replace(/\n/g,'<br>');this.currentFaq = faq;this.faqModal.style.display = 'block';this.modalClose.focus();}closeFaqModal() {this.faqModal.style.display = 'none';this.currentFaq = null;}useFaqAnswer() {if (this.currentFaq) {const content = `<strong>FAQ:${this.currentFaq.title}</strong><br><br>${this.currentFaq.answer}`;const messageElement = this.createMessageElement('bot',content);this.chatMessages.appendChild(messageElement);this.scrollToBottom();this.closeFaqModal();}}handleFileSelect() {const file = this.fileInput.files[0];if (file) {if (file.size > 16 * 1024 * 1024) {this.showNotification('ファイルサイズが大きすぎます。16MB以下のファイルを選択してください。','error');this.fileInput.value = '';return;}const fileName = file.name;const fileSize = this.formatFileSize(file.size);this.messageInput.value += `\n[添付ファイル:${fileName}(${fileSize})]`;this.updateCharCount();this.showNotification(`ファイルが添付されました:${fileName}`,'success');}}setupAutoSave() {setInterval(() => {const content = this.messageInput.value;if (content.trim()) {localStorage.setItem('chatDraft',content);}},5000);const savedDraft = localStorage.getItem('chatDraft');if (savedDraft) {this.messageInput.value = savedDraft;this.updateCharCount();}const originalSendMessage = this.sendMessage.bind(this);this.sendMessage = async function() {localStorage.removeItem('chatDraft');return originalSendMessage();};}showTypingIndicator() {if (this.typingTimeout) {clearTimeout(this.typingTimeout);}this.isTyping = true;this.typingTimeout = setTimeout(() => {this.isTyping = false;},1000);}hideTypingIndicator() {this.isTyping = false;if (this.typingTimeout) {clearTimeout(this.typingTimeout);}}showBotTyping() {const typingElement = document.createElement('div');typingElement.className = 'bot-message typing-indicator';typingElement.innerHTML = ` <div class="message-bubble typing-bubble"> <div class="message-content"> <div class="typing-dots"> <span></span><span></span><span></span> </div> </div> </div> `;this.chatMessages.appendChild(typingElement);this.scrollToBottom();}hideBotTyping() {const typingIndicator = this.chatMessages.querySelector('.typing-indicator');if (typingIndicator) {typingIndicator.remove();}}addMessageStatus(messageElement,status) {let statusElement = messageElement.querySelector('.message-status');if (!statusElement) {statusElement = document.createElement('div');statusElement.className = 'message-status';messageElement.querySelector('.message-bubble').appendChild(statusElement);}statusElement.className = `message-status ${status}`;switch (status) {case 'sending':statusElement.innerHTML = '⏳';statusElement.title = '送信中...';break;case 'sent':statusElement.innerHTML = '✅';statusElement.title = '送信完了';break;case 'error':statusElement.innerHTML = '❌';statusElement.title = '送信エラー';break;}}showNotification(message,type = 'info') {const notification = document.createElement('div');notification.className = `notification ${type}`;notification.textContent = message;let notificationContainer = document.querySelector('.notification-container');if (!notificationContainer) {notificationContainer = document.createElement('div');notificationContainer.className = 'notification-container';document.body.appendChild(notificationContainer);}notificationContainer.appendChild(notification);setTimeout(() => {notification.remove();},3000);}formatFileSize(bytes) {if (bytes === 0) return '0 Bytes';const k = 1024;const sizes = ['Bytes','KB','MB','GB'];const i = Math.floor(Math.log(bytes) / Math.log(k));return parseFloat((bytes / Math.pow(k,i)).toFixed(2)) + ' ' + sizes[i];}setupMobileHandlers() {const faqToggleBtn = document.getElementById('faqToggleBtn');const faqCloseBtn = document.getElementById('faqCloseBtn');const faqSidebar = document.getElementById('faqSidebar');const faqOverlay = document.getElementById('faqSidebarOverlay');if (faqToggleBtn) {faqToggleBtn.addEventListener('click',() => {this.showFAQSidebar();});}if (faqCloseBtn) {faqCloseBtn.addEventListener('click',() => {this.hideFAQSidebar();});}if (faqOverlay) {faqOverlay.addEventListener('click',() => {this.hideFAQSidebar();});}if ('ontouchstart' in window) {this.setupTouchHandlers();}this.setupKeyboardHandlers();this.setupScrollOptimization();this.setupFAQMobileHandlers();}showFAQSidebar() {const faqSidebar = document.getElementById('faqSidebar');const faqOverlay = document.getElementById('faqSidebarOverlay');if (faqSidebar && faqOverlay) {faqSidebar.classList.add('show');faqOverlay.classList.add('show');document.body.style.overflow = 'hidden';}}hideFAQSidebar() {const faqSidebar = document.getElementById('faqSidebar');const faqOverlay = document.getElementById('faqSidebarOverlay');if (faqSidebar && faqOverlay) {faqSidebar.classList.remove('show');faqOverlay.classList.remove('show');document.body.style.overflow = '';}}setupTouchHandlers() {if (this.chatMessages) {this.chatMessages.style.webkitOverflowScrolling = 'touch';}document.addEventListener('touchstart',function() {},{passive:true});}setupKeyboardHandlers() {if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {const viewport = document.querySelector('meta[name=viewport]');const originalContent = viewport.content;this.messageInput.addEventListener('focus',() => {viewport.content = 'width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no';setTimeout(() => {if (this.chatMessages) {this.chatMessages.scrollTop = this.chatMessages.scrollHeight;}},300);});this.messageInput.addEventListener('blur',() => {viewport.content = originalContent;});}let initialViewportHeight = window.visualViewport ? window.visualViewport.height :window.innerHeight;if (window.visualViewport) {window.visualViewport.addEventListener('resize',() => {const currentHeight = window.visualViewport.height;const heightDifference = initialViewportHeight - currentHeight;if (heightDifference > 150) {document.body.style.paddingBottom = heightDifference + 'px';}else {document.body.style.paddingBottom = '';}});}}setupScrollOptimization() {if (this.chatMessages) {let isScrolling = false;this.chatMessages.addEventListener('scroll',() => {if (!isScrolling) {this.chatMessages.style.pointerEvents = 'none';clearTimeout(this.scrollTimeout);this.scrollTimeout = setTimeout(() => {this.chatMessages.style.pointerEvents = '';isScrolling = false;},150);isScrolling = true;}},{passive:true});this.chatMessages.addEventListener('scroll',() => {this.lastScrollPosition = this.chatMessages.scrollTop;},{passive:true});}}setupFAQMobileHandlers() {this.faqItems.forEach(item => {item.addEventListener('touchstart',() => {item.style.backgroundColor = '#f0f0f0';},{passive:true});item.addEventListener('touchend',() => {setTimeout(() => {item.style.backgroundColor = '';},150);},{passive:true});item.addEventListener('click',() => {if (window.innerWidth <= 768) {setTimeout(() => {this.hideFAQSidebar();},500);}});});}sendMessage() {if (window.innerWidth <= 768 && this.messageInput) {this.messageInput.blur();}}scrollToBottom() {if (this.chatMessages) {if (window.innerWidth <= 768) {this.chatMessages.scrollTo({top:this.chatMessages.scrollHeight,behavior:'smooth' });}else {this.chatMessages.scrollTop = this.chatMessages.scrollHeight;}}}showNotification(message,type = 'info') {const notification = document.createElement('div');notification.className = `notification ${type}`;notification.textContent = message;if (window.innerWidth <= 768) {notification.style.position = 'fixed';notification.style.top = '10px';notification.style.left = '10px';notification.style.right = '10px';notification.style.zIndex = '1100';}document.body.appendChild(notification);setTimeout(() => {notification.remove();},3000);}}document.addEventListener('DOMContentLoaded',() => {new ChatApp();});class FAQSearchManager {constructor() {this.initializeElements();this.attachEventListeners();this.initializeSearch();this.originalFAQs = this.getAllFAQItems();}initializeElements() {this.searchInput = document.getElementById('faqSearchInput');this.searchClear = document.getElementById('faqSearchClear');this.categoryFilter = document.getElementById('faqCategoryFilter');this.faqList = document.getElementById('faqList');this.searchResults = document.querySelector('.faq-search-results');this.searchResultCount = document.getElementById('faqSearchResultCount');this.noSearchResults = document.querySelector('.no-search-results');}attachEventListeners() {this.searchInput.addEventListener('input',(e) => {this.performSearch(e.target.value);});this.searchClear.addEventListener('click',() => {this.clearSearch();});this.categoryFilter.addEventListener('change',(e) => {this.filterByCategory(e.target.value);});document.addEventListener('keydown',(e) => {if (e.altKey && e.key.toLowerCase() === 'f') {e.preventDefault();this.searchInput.focus();}});this.searchInput.addEventListener('keydown',(e) => {if (e.key === 'Escape') {this.clearSearch();}});}initializeSearch() {this.searchResults.style.display = 'none';this.updateClearButtonVisibility();}getAllFAQItems() {return Array.from(this.faqList.querySelectorAll('.faq-item'));}performSearch(query) {const trimmedQuery = query.trim().toLowerCase();const selectedCategory = this.categoryFilter.value;if (!trimmedQuery && !selectedCategory) {this.showAllFAQs();return;}const matchingFAQs = this.originalFAQs.filter(faq => {const searchText = faq.dataset.searchText || '';const category = faq.dataset.category || '';const matchesQuery = !trimmedQuery || searchText.includes(trimmedQuery);const matchesCategory = !selectedCategory || category === selectedCategory;return matchesQuery && matchesCategory;});this.displaySearchResults(matchingFAQs,trimmedQuery);this.updateClearButtonVisibility();}filterByCategory(category) {const query = this.searchInput.value.trim().toLowerCase();if (!category && !query) {this.showAllFAQs();return;}const matchingFAQs = this.originalFAQs.filter(faq => {const searchText = faq.dataset.searchText || '';const faqCategory = faq.dataset.category || '';const matchesQuery = !query || searchText.includes(query);const matchesCategory = !category || faqCategory === category;return matchesQuery && matchesCategory;});this.displaySearchResults(matchingFAQs,query);}displaySearchResults(matchingFAQs,query) {this.originalFAQs.forEach(faq => {faq.style.display = 'none';faq.classList.remove('search-highlight');});if (matchingFAQs.length > 0) {matchingFAQs.forEach(faq => {faq.style.display = 'block';if (query) {faq.classList.add('search-highlight');this.highlightSearchTerms(faq,query);}});this.sortFAQsByRelevance(matchingFAQs,query);this.noSearchResults.style.display = 'none';}else {this.noSearchResults.style.display = 'block';}this.updateSearchResultCount(matchingFAQs.length);this.searchResults.style.display = 'block';}highlightSearchTerms(faqElement,query) {if (!query) return;const title = faqElement.querySelector('.faq-title');const preview = faqElement.querySelector('.faq-preview');if (title) {title.innerHTML = this.highlightText(title.textContent,query);}if (preview) {preview.innerHTML = this.highlightText(preview.textContent,query);}}highlightText(text,query) {if (!query) return text;const regex = new RegExp(`(${this.escapeRegExp(query)})`,'gi');return text.replace(regex,'<mark class="search-highlight-text">$1</mark>');}escapeRegExp(string) {return string.replace(/[.*+?^${}()|[\]\\]/g,'\\$&');}sortFAQsByRelevance(faqs,query) {if (!query) return;faqs.sort((a,b) => {const scoreA = this.calculateRelevanceScore(a,query);const scoreB = this.calculateRelevanceScore(b,query);return scoreB - scoreA;});faqs.forEach((faq,index) => {faq.style.order = index;});}calculateRelevanceScore(faq,query) {const title = faq.querySelector('.faq-title')?.textContent.toLowerCase() || '';const preview = faq.querySelector('.faq-preview')?.textContent.toLowerCase() || '';const keywords = faq.dataset.keywords?.toLowerCase() || '';let score = 0;if (title.includes(query)) score += 10;if (keywords.includes(query)) score += 5;if (preview.includes(query)) score += 2;if (title === query || keywords.split(',').some(k => k.trim() === query)) {score += 20;}return score;}showAllFAQs() {this.originalFAQs.forEach(faq => {faq.style.display = 'block';faq.style.order = '';faq.classList.remove('search-highlight');const title = faq.querySelector('.faq-title');const preview = faq.querySelector('.faq-preview');if (title && title.innerHTML.includes('<mark')) {title.innerHTML = title.textContent;}if (preview && preview.innerHTML.includes('<mark')) {preview.innerHTML = preview.textContent;}});this.noSearchResults.style.display = 'none';this.searchResults.style.display = 'none';}clearSearch() {this.searchInput.value = '';this.categoryFilter.value = '';this.showAllFAQs();this.updateClearButtonVisibility();this.searchInput.focus();}updateSearchResultCount(count) {this.searchResultCount.textContent = `${count}件の検索結果`;}updateClearButtonVisibility() {const hasContent = this.searchInput.value.trim().length > 0 || this.categoryFilter.value;this.searchClear.style.display = hasContent ? 'flex' :'none';}searchFAQ(query) {this.searchInput.value = query;this.performSearch(query);}getCategoryStats() {const stats = {};this.originalFAQs.forEach(faq => {const category = faq.dataset.category || '未分類';stats[category] = (stats[category] || 0) + 1;});return stats;}getPopularFAQs(limit = 5) {return this.originalFAQs .map(faq => ({element:faq,viewCount:parseInt(faq.querySelector('.faq-stats')?.textContent.match(/\d+/)?.[0] || '0') })) .sort((a,b) => b.viewCount - a.viewCount) .slice(0,limit) .map(item => item.element);}}const searchHighlightStyles = ` <style> .search-highlight-text {background-color:#ffeb3b;color:#000;padding:1px 2px;border-radius:2px;font-weight:bold;}body.high-contrast .search-highlight-text {background-color:#fff;color:#000;border:1px solid #000;}.faq-list {display:flex;flex-direction:column;}</style> `;document.head.insertAdjacentHTML('beforeend',searchHighlightStyles);document.addEventListener('DOMContentLoaded',() => {if (document.getElementById('faqSearchInput')) {window.faqSearchManager = new FAQSearchManager();window.searchFAQ = (query) => window.faqSearchManager.searchFAQ(query);window.getFAQStats = () => window.faqSearchManager.getCategoryStats();console.log('🔍 FAQ検索機能が初期化されました');console.log('利用可能なショートカット:');console.log('- Alt + F:FAQ検索にフォーカス');console.log('- Escape:検索クリア');}});class UserIdentificationManager {constructor() {this.currentUser = null;this.isIdentified = false;this.sessionId = this.getOrCreateSessionId();this.initializeElements();this.attachEventListeners();this.loadSavedUserInfo();}initializeElements() {this.userIdentityPanel = document.getElementById('userIdentityPanel');this.userNameInput = document.getElementById('userNameInput');this.userDepartmentInput = document.getElementById('userDepartmentInput');this.identifyButton = document.getElementById('identifyUserBtn');this.clearIdentityButton = document.getElementById('clearIdentityBtn');this.userDisplayName = document.getElementById('userDisplayName');this.userStatus = document.getElementById('userStatus');this.messageForm = document.getElementById('messageForm');this.messagesContainer = document.getElementById('messages');}attachEventListeners() {if (this.identifyButton) {this.identifyButton.addEventListener('click',() => {this.identifyUser();});}if (this.clearIdentityButton) {this.clearIdentityButton.addEventListener('click',() => {this.clearUserIdentity();});}if (this.userNameInput) {this.userNameInput.addEventListener('keypress',(e) => {if (e.key === 'Enter') {this.identifyUser();}});}if (this.messageForm) {this.messageForm.addEventListener('submit',(e) => {this.attachUserInfoToMessage(e);});}document.addEventListener('DOMContentLoaded',() => {this.updateUserDisplay();});}getOrCreateSessionId() {let sessionId = localStorage.getItem('chatSessionId');if (!sessionId) {sessionId = 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2,9);localStorage.setItem('chatSessionId',sessionId);}return sessionId;}loadSavedUserInfo() {const savedUserInfo = localStorage.getItem('userIdentity');if (savedUserInfo) {try {this.currentUser = JSON.parse(savedUserInfo);this.isIdentified = true;this.updateUserDisplay();console.log('👤 保存されたユーザー情報を読み込みました:',this.currentUser.display_name);}catch (error) {console.error('ユーザー情報の読み込みエラー:',error);localStorage.removeItem('userIdentity');}}}async identifyUser() {const name = this.userNameInput?.value.trim();const department = this.userDepartmentInput?.value.trim();if (!name) {this.showNotification('名前を入力してください','warning');return;}try {const response = await fetch('/api/identify-user',{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.getCSRFToken() },body:JSON.stringify({display_name:name,department:department,session_id:this.sessionId }) });if (response.ok) {const userData = await response.json();this.currentUser = userData.user;this.isIdentified = true;localStorage.setItem('userIdentity',JSON.stringify(this.currentUser));this.updateUserDisplay();this.hideIdentificationPanel();this.showNotification(`こんにちは、${this.currentUser.display_name}さん！`,'success');console.log('👤 ユーザー識別完了:',this.currentUser);}else {throw new Error('ユーザー識別に失敗しました');}}catch (error) {console.error('ユーザー識別エラー:',error);this.showNotification('ユーザー識別中にエラーが発生しました','error');}}clearUserIdentity() {this.currentUser = null;this.isIdentified = false;localStorage.removeItem('userIdentity');this.updateUserDisplay();this.showIdentificationPanel();this.showNotification('ユーザー情報をクリアしました','info');console.log('👤 ユーザー識別情報をクリアしました');}updateUserDisplay() {if (this.userDisplayName && this.userStatus) {if (this.isIdentified && this.currentUser) {this.userDisplayName.textContent = this.currentUser.display_name;this.userStatus.textContent = this.currentUser.department ? `${this.currentUser.department}` :'登録ユーザー';this.userStatus.className = 'user-status identified';}else {this.userDisplayName.textContent = '匿名ユーザー';this.userStatus.textContent = '未識別';this.userStatus.className = 'user-status anonymous';}}if (this.isIdentified) {this.hideIdentificationPanel();}else {this.showIdentificationPanel();}}showIdentificationPanel() {if (this.userIdentityPanel) {this.userIdentityPanel.style.display = 'block';}}hideIdentificationPanel() {if (this.userIdentityPanel) {this.userIdentityPanel.style.display = 'none';}}attachUserInfoToMessage(event) {if (this.isIdentified && this.currentUser) {const formData = new FormData(event.target);formData.append('user_id',this.currentUser.id);formData.append('user_display_name',this.currentUser.display_name);formData.append('user_department',this.currentUser.department || '');}formData.append('session_id',this.sessionId);}getUserInfo() {return {user:this.currentUser,isIdentified:this.isIdentified,sessionId:this.sessionId };}addMessageToChat(messageData) {const messageElement = document.createElement('div');messageElement.className = `message ${messageData.message_type}`;const senderInfo = this.formatSenderInfo(messageData.sender_info);const responderInfo = this.formatResponderInfo(messageData.responder_info);messageElement.innerHTML = ` <div class="message-header"> <div class="message-sender">${senderInfo}</div> <div class="message-time">${this.formatTime(messageData.timestamp)}</div> </div> <div class="message-content">${messageData.content}</div> ${responderInfo ? `<div class="message-responder">${responderInfo}</div>` :''}${messageData.file_name ? `<div class="message-attachment">📎 ${messageData.file_name}</div>` :''}`;if (this.messagesContainer) {this.messagesContainer.appendChild(messageElement);this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;}}formatSenderInfo(senderInfo) {if (!senderInfo) return '不明な送信者';if (senderInfo.display_name) {const typeLabel = this.getSenderTypeLabel(senderInfo.sender_type || senderInfo.user_type);return `${senderInfo.display_name}(${typeLabel})`;}return '匿名ユーザー';}formatResponderInfo(responderInfo) {if (!responderInfo) return null;if (responderInfo.name) {return `回答者:${responderInfo.name}(${responderInfo.department || '職員'})`;}else if (responderInfo.type === 'faq_bot') {return `自動回答:${responderInfo.faq_title}`;}return null;}getSenderTypeLabel(type) {const labels = {'anonymous':'匿名','registered':'登録済み','staff':'職員','admin':'管理者' };return labels[type] || '不明';}formatTime(timestamp) {if (!timestamp) return '';const date = new Date(timestamp);return date.toLocaleTimeString('ja-JP',{hour:'2-digit',minute:'2-digit' });}getCSRFToken() {const token = document.querySelector('meta[name="csrf-token"]');return token ? token.getAttribute('content') :'';}showNotification(message,type = 'info') {if (window.chatApp && window.chatApp.showNotification) {window.chatApp.showNotification(message,type);}else {console.log(`${type.toUpperCase()}:${message}`);}}async identifyAsStaff(staffId,staffName,department) {try {const response = await fetch('/api/identify-staff',{method:'POST',headers:{'Content-Type':'application/json','X-CSRFToken':this.getCSRFToken() },body:JSON.stringify({staff_id:staffId,name:staffName,department:department,session_id:this.sessionId }) });if (response.ok) {const staffData = await response.json();this.currentUser = staffData.user;this.isIdentified = true;this.currentUser.user_type = 'staff';localStorage.setItem('userIdentity',JSON.stringify(this.currentUser));this.updateUserDisplay();this.showNotification(`職員として識別されました:${staffName}`,'success');console.log('👨‍💼 職員識別完了:',staffData);}else {throw new Error('職員識別に失敗しました');}}catch (error) {console.error('職員識別エラー:',error);this.showNotification('職員識別中にエラーが発生しました','error');}}async getUserStats() {if (!this.isIdentified || !this.currentUser) return null;try {const response = await fetch(`/api/user-stats/${this.currentUser.id}`);if (response.ok) {return await response.json();}}catch (error) {console.error('ユーザー統計取得エラー:',error);}return null;}}window.UserIdentificationManager = UserIdentificationManager;document.addEventListener('DOMContentLoaded',() => {window.userIdentification = new UserIdentificationManager();console.log('👤 ユーザー識別システムが初期化されました');});class AccessibilityManager {constructor() {this.initFontSizeControls();this.initContrastToggle();this.initKeyboardNavigation();this.loadUserPreferences();}initFontSizeControls() {const buttons = document.querySelectorAll('.font-size-btn');console.log(`フォントサイズボタンを初期化:${buttons.length}個見つかりました`);buttons.forEach((button,index) => {console.log(`ボタン${index + 1}:data-size="${button.dataset.size}"`);button.addEventListener('click',(e) => {e.preventDefault();const size = e.target.dataset.size;console.log(`🔘 フォントサイズボタンがクリックされました:${size}`);this.setFontSize(size);this.savePreference('fontSize',size);});});}setFontSize(size) {const body = document.body;console.log(`フォントサイズ変更開始:${size}`);console.log('変更前のクラス:',body.classList.toString());body.classList.remove('font-small','font-medium','font-large','font-xlarge');body.classList.add(`font-${size}`);console.log('変更後のクラス:',body.classList.toString());document.querySelectorAll('.font-size-btn').forEach(btn => {btn.classList.remove('active');});const activeBtn = document.querySelector(`[data-size="${size}"]`);if (activeBtn) {activeBtn.classList.add('active');console.log(`ボタン ${size}をアクティブに設定`);}else {console.error(`ボタン ${size}が見つかりません`);}const computedStyle = window.getComputedStyle(body);console.log('実際のフォントサイズ:',computedStyle.fontSize);console.log(`✅ フォントサイズを ${size}に変更しました`);}initContrastToggle() {const contrastBtn = document.getElementById('contrastToggle');if (contrastBtn) {contrastBtn.addEventListener('click',() => {this.toggleHighContrast();});}}toggleHighContrast() {const body = document.body;const contrastBtn = document.getElementById('contrastToggle');body.classList.toggle('high-contrast');const isHighContrast = body.classList.contains('high-contrast');contrastBtn.classList.toggle('active',isHighContrast);contrastBtn.textContent = isHighContrast ? '☀️' :'🌓';contrastBtn.title = isHighContrast ? 'ノーマル表示に戻す' :'ハイコントラスト表示';this.savePreference('highContrast',isHighContrast);console.log(`ハイコントラストモード:${isHighContrast ? 'ON' :'OFF'}`);}initKeyboardNavigation() {const faqItems = document.querySelectorAll('.faq-item');faqItems.forEach((item,index) => {item.setAttribute('tabindex','0');item.setAttribute('role','button');item.setAttribute('aria-label',`FAQ:${item.querySelector('.faq-title')?.textContent}`);item.addEventListener('keydown',(e) => {if (e.key === 'Enter' || e.key === ' ') {e.preventDefault();item.click();}});});const messageInput = document.getElementById('messageInput');if (messageInput) {messageInput.addEventListener('keydown',(e) => {if (e.ctrlKey && e.key === 'Enter') {e.preventDefault();const sendButton = document.getElementById('sendButton');if (sendButton) {sendButton.click();}}else if (e.key === 'Escape') {messageInput.value = '';this.updateCharCount();}});}document.addEventListener('keydown',(e) => {if (e.altKey && ['1','2','3','4'].includes(e.key)) {e.preventDefault();const sizes = ['small','medium','large','xlarge'];const size = sizes[parseInt(e.key) - 1];this.setFontSize(size);this.savePreference('fontSize',size);}else if (e.altKey && e.key.toLowerCase() === 'c') {e.preventDefault();this.toggleHighContrast();}else if (e.altKey && e.key.toLowerCase() === 'f') {e.preventDefault();const firstFaqItem = document.querySelector('.faq-item');if (firstFaqItem) {firstFaqItem.focus();}}else if (e.altKey && e.key.toLowerCase() === 'm') {e.preventDefault();const messageInput = document.getElementById('messageInput');if (messageInput) {messageInput.focus();}}});}updateCharCount() {const messageInput = document.getElementById('messageInput');const charCount = document.getElementById('charCount');if (messageInput && charCount) {charCount.textContent = messageInput.value.length;}}savePreference(key,value) {try {localStorage.setItem(`accessibility_${key}`,JSON.stringify(value));}catch (e) {console.warn('設定の保存に失敗しました:',e);}}loadUserPreferences() {try {const savedFontSize = localStorage.getItem('accessibility_fontSize');if (savedFontSize) {const fontSize = JSON.parse(savedFontSize);console.log('保存されたフォントサイズを復元:',fontSize);this.setFontSize(fontSize);}else {console.log('デフォルトフォントサイズを設定:medium');this.setFontSize('medium');}const savedHighContrast = localStorage.getItem('accessibility_highContrast');if (savedHighContrast) {const isHighContrast = JSON.parse(savedHighContrast);console.log('保存されたハイコントラスト設定を復元:',isHighContrast);if (isHighContrast) {this.toggleHighContrast();}}}catch (e) {console.error('設定の読み込みに失敗しました:',e);this.setFontSize('medium');}console.log('現在のbodyのクラス:',document.body.classList.toString());}}function initializeAccessibility() {console.log('🚀 アクセシビリティマネージャーを初期化します...');if (window.accessibilityManager) {console.log('既に初期化済みです');return;}try {window.accessibilityManager = new AccessibilityManager();console.log('✅ アクセシビリティマネージャーの初期化が完了しました');console.log(` 🎯 アクセシビリティ機能ショートカット:Alt + 1-4:フォントサイズ変更 (小/中/大/特大) Alt + C:ハイコントラスト切り替え Alt + F:FAQ一覧にフォーカス Alt + M:メッセージ入力にフォーカス Ctrl + Enter:メッセージ送信 Escape:入力欄クリア Tab:要素間の移動 Enter/Space:選択した要素のアクション `);}catch (error) {console.error('❌ アクセシビリティマネージャーの初期化に失敗しました:',error);}}document.addEventListener('DOMContentLoaded',initializeAccessibility);if (document.readyState === 'loading') {document.addEventListener('DOMContentLoaded',initializeAccessibility);}else {initializeAccessibility();}window.testFontSize = function(size) {console.log(`🧪 手動テスト:フォントサイズを ${size}に変更`);const body = document.body;body.classList.remove('font-small','font-medium','font-large','font-xlarge');body.classList.add(`font-${size}`);console.log('現在のbodyクラス:',body.classList.toString());console.log('計算されたフォントサイズ:',window.getComputedStyle(body).fontSize);return {classes:body.classList.toString(),fontSize:window.getComputedStyle(body).fontSize };};